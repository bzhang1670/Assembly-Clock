/*
	 * Prelab_10_Brian_Zhang.asm
	 * Created: 11/13/2013 2:59:13 PM
	 *  Author: @Brian_Zhang
	 *
	 */

	/*
	//setup portb
	        ldi r16, 0xfe	; turn pnp transistors off, pullups on
	        out portb, r16
	        ldi r16, 0b11000111
	        out ddrb, r16

	//setup portc
	        ldi r20,  0b00000011 ; 1 for output pins, 0 for inputs
	        out ddrc, r20	     ; program pc0 and pc1 as outputs
	        ldi r20, 0xff	     ; load 11111111 in r20
	        out ddrd, r20	     ; program all of portd as outputs

	*/

	        .def ticks = r16
	        .def secs = r17
	        .def minutes = r18
	        .def hours = r19
	        .def dimmer = r25

	        clr ticks
	        clr secs
	        clr minutes
	        clr hours
	        clr dimmer


tick:
	        sbis pinc,7
	        rjmp tick

	        inc ticks
	        cpi ticks, 60
	        brne tock
	        clr ticks

	        inc secs
	        cpi secs, 60
	        brne tock
	        clr secs

	        inc minutes
	        cpi minutes, 60
	        brne tock
	        clr minutes

	        inc hours
	        cpi hours, 24
	        brne tock
	        clr hours


tock:
	        ser r26
	        out portd, r26

	        com secs
	        inc dimmer
	        sbrs dimmer, 2
	        rjmp noseconds
	        out portd, secs
	        clr dimmer

noseconds:
	        com secs


	        cbi portd, 6
	        cbi portd, 7

	        cbi portb, 0

	        rcall delay_21k

	        sbi portb, 0

	        sbi portb, 0
	        mov r20, hours // h

	        rcall get_segs

	        out portd, r21

	        cbi portb, 1
	        rcall delay_21k
	        sbi portb, 1

	        out portd, r22

	        cbi portb, 2
	        rcall delay_21k
	        sbi portb, 2 // q

	        mov r20, minutes // r
	        rcall get_segs

	        out portd, r21

	        cbi portb, 6
	        rcall delay_21k
	        sbi portb, 6

	        out portd, r22

	        cbi portb, 7
	        rcall delay_21k
	        sbi portb, 7 // end r


	        sbic pinc, 7
	        rjmp tock
	        rjmp tick

	/*

bored:
	        cbi portc, 4	;turn off LED
	        sbis pinb, 3	;check button
	        sbi portc, 4	;turn on LED
	        rcall delay	;wait a while
	        rjmp bored	;repeat forever


	*/

	/*get_segs_m takes an argument in scr and returns the most significant LED
	  segments (segs_h) and least significant LED segment (segs_l). The scr
	  register is 0 to 59 for minutes

writes:	 clr, tens,zl, zh, segs_l, segs_h        */
get_segs:
	        clr r0		;clear tens register
div_m:
	        cpi r20,10	;bigger than ten?
	        brlo done_div_m	;        no, done
	        inc r0		;increment tens count
	        subi r20,10	;subtract 10 from scr
	        rjmp div_m	;repeat until r20 is less than 10
done_div_m:
	        ldi zh,high(seg_table<<1) ;load z register for indirect read
	        ldi zl,low(seg_table<<1)
	        add zl,r0	;compute offset into the table
	        brcc nc1_m	;carry required?
	        inc zh		;carry
nc1_m:
	        lpm r21,z	;read segments from data table
	        ldi zh,high(seg_table<<1) ;load z register for indirect read
	        ldi zl,low(seg_table<<1)
	        add zl,r20	;compute offset into the table
	        brcc nc2_m	;carry required?
	        inc zh		;carry
nc2_m:
	        lpm r22,z	;read segments from data table
	        ret		;return


	// delay_21k simply calls delay 21 times
delay_21k:
	        rcall delay
	                /*
	        rcall delay
	        rcall delay
	        rcall delay
	        rcall delay
	        rcall delay
	        rcall delay
	        rcall delay
	        rcall delay
	        rcall delay
	        rcall delay
	        rcall delay
	        rcall delay
	        rcall delay
	        rcall delay
	        rcall delay
	        rcall delay
	        rcall delay
	                */
	        rcall delay
	        rcall delay
	        rcall delay
	        ret


	// delay takes 1003 cycles to execute
delay:	                       	;the label that identifies the subroutine to the assembler
	    clr r31             ;initialize register 31 (this can be any unused register)
delay_loop:	             	;a label for the brne instruction
	    inc r31             ;increment r31
	    cpi r31,0xf9        ;compare r31 to the final value
	    brne delay_loop     ;jump to delay_loop if the count has not reached the final value
	    ret                 ;return. The microcontroller 'remembers' where it came from


	        // initialize LED segment table
seg_table:
	        .dw 0xeb09	;1,0
	        .dw 0xc185	;3,2
	        .dw        0x5163 ;5,4
	        .dw 0xcb11	  ;7,6
	        .dw 0x4101	  ;9,8
	        .dw 0x00ff	  ;on,off